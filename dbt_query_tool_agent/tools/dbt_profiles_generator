import os
from urllib.parse import urlparse
import google.generativeai as genai
from google.adk.tools import FunctionTool
from dbt_query_tool_agent import prompts
from typing import Optional
from dbt_query_tool_agent import prompts
from google.cloud import storage
STORAGE_CLIENT = storage.Client()
MODEL = 'gemini-2.5-flash'

PROFILES_YML_PROMPT_INSTRUCTIONS = prompts.PARSING_INSTRUCTIONS 

def generate_dbt_profiles_yml(
    gcs_project_url: str, 
    project_id: str,
    dataset_name: str,
    threads: Optional[int] = 1,
    timeout_seconds: Optional[int] = 300
) -> dict:
    """
    Generates a dbt profiles.yml file and saves it to the GCS location
    corresponding to the dbt project root.
    """
    try:
        if not gcs_project_url.startswith('gs://'):
            return {"error": "Invalid GCS project URL. Must start with 'gs://'."}
        if not gcs_project_url.endswith('/'):
            gcs_project_url += '/' # Ensure it's treated as a directory

        parsed_url = urlparse(gcs_project_url)
        bucket_name = parsed_url.netloc
        # Extract dbt_project_name from the GCS project URL.
        # Example: gs://my-bucket/my_dbt_project/ -> my_dbt_project
        dbt_project_name = parsed_url.path.strip('/').split('/')[-1]
        
        bucket = STORAGE_CLIENT.bucket(bucket_name)

        model = genai.GenerativeModel(MODEL)

        # Craft the prompt for the LLM to generate profiles.yml
        llm_prompt_parts = [
            PROFILES_YML_PROMPT_INSTRUCTIONS,
            f"""
            Generate a dbt `profiles.yml` file for the dbt project '{dbt_project_name}'.
            Use the following details:
            - DBT Project Name: {dbt_project_name}
            - BigQuery Project ID: {project_id}
            - BigQuery Dataset Name: {dataset_name}
            - Threads: {threads}
            - Timeout Seconds: {timeout_seconds}
            
            Ensure the output is in YAML format within a markdown code block.
            """
        ]

        response = model.generate_content(llm_prompt_parts)

        # Extract the generated YAML content
        output_yml = response.text.replace('```yaml', '').replace('```', '').strip()

        # Construct the full output GCS path for profiles.yml (at the root of the dbt project)
        output_gcs_path = f"{dbt_project_name}/profiles.yml"
        output_blob = bucket.blob(output_gcs_path)

        tags = {
            'author': 'dbt_adk_agent',
            'dbt_artifact_type': 'profiles_yml'
        }
        output_blob.metadata = tags

        with output_blob.open('w') as file:
            file.write(output_yml)

        return {
            'output_path': f'gs://{bucket_name}/{output_gcs_path}',
            'output_yml_content': output_yml,
            'result': 'SUCCESS'
        }
    except Exception as err:
        return {
            'output_path': '',
            'output_yml_content': '',
            'result': 'ERROR',
            'message': str(err)
        }

generate_dbt_profiles_yml_tool = FunctionTool(generate_dbt_profiles_yml)